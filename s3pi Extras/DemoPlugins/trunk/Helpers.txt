#
# Comments start with "#", "//" or ";" anywhere on the line
# Block comments /* */ are allowed, too.
#

#
# Matching is done top to bottom
#

#
# Matching is done against "Wrapper" (matches the name of the wrapper used for the resource;
# "DefaultResource" is the wrapper used when no other one is identified)
# and against IResourceKey values (e.g. "ResourceType").
# In both cases "*" can be used to mean "any".
#

# There are two helpers, "Helper1" and "Helper2".  For brevity I've used "..." to mean either "Helper1" or "Helper2":

# You can specify the label for the buttons with "...Label: labeltext"

# The command to run is specified with "...Command: exename" (with path, if needed)
# (Note that the folder containing the config file is included in the OS search path)

# Any required arguments are specified with "...Arguments: args"
# {} is replaced with the filename when on ...Command or ...Arguments lines
# {prop} is replaced with the selected resource's "prop" field value on ...Argument lines
# Note: you probably want to add quotes around {} and {prop} - this isn't automatic

# To flag a command as read-only (preventing any updates to the package), use "...ReadOnly: anything_here"
# Note: if you are passing a file to your editor and it does not update the write timestamp,
# use "...IgnoreWriteTimestamp: anything_here".

# To group matching criteria with their actions, prefix the criteria and actions with the same value
# (here we use "txt", "img", "dds" and "any").


// Text/(pure) XML files 
txt.Wrapper: TextResource
txt.Helper1Label: Edit
// Windows notepad is in the standard Windows PATH, so you don't need to say where it is:
txt.Helper1Command: notepad
txt.Helper1Arguments: "{}"

// Images
; jpg
jpg.ResourceType: 0x2F7D0002
jpg.Helper1Label: Paint
jpg.Helper1Command: mspaint
jpg.Helper1Arguments: "{}"

; png
img.Wrapper: ImageResource
// This is where GIMP installs by default:
;img.Helper1Label: GIMP
;img.Helper1Command: C:\Program Files\GIMP-2.0\bin\gimp-2.6.exe
;img.Helper1Arguments: "{}"

// DDS files
dds.ResourceType: 0x00B2D882 0x8FFB80F6
dds.Helper1Label: View
dds.Helper1Command: ViewDDS.exe
dds.Helper1ReadOnly: yes
; ViewDDS can process data from the clipboard in the format used by s3pe:
;dds.Helper1Arguments: /clipboard
dds.Helper1Arguments: "{}"
;dds.Helper2Label: GIMP
;dds.Helper2Command: C:\Program Files\GIMP-2.0\bin\gimp-2.6.exe
;dds.Helper2Arguments: "{}"

// all supplied editors can also use the clipboard (either pass /clipboard or no arguments)
// we pass a file to avoid losing the user's clipboard content.

// ObjKey editor, using the editor supplied with s3pe
objk.ResourceType: 0x02DC343F
objk.Helper1Label: Edit
objk.Helper1Command: OBJKResourceEditor
objk.Helper1Arguments: "{}"

// String tables, using the editor supplied with s3pe
stbl.ResourceType: 0x220557DA
stbl.Helper1Label: Edit
stbl.Helper1Command: STBLResourceEditor
stbl.Helper1Arguments: "{}"

// Visual proxy files, using the editor supplied with s3pe
vpxy.ResourceType: 0x736884F1
vpxy.Helper1Label: Edit
vpxy.Helper1Command: VPXYResourceEditor
vpxy.Helper1Arguments: "{}"


// --
// Here are some other examples
// --

// Could try just running it... but we won't; the uses the OS's file associations
;any.Wrapper: *
;any.Helper1Label: Start
;any.Helper1Command: {}
// To avoid ever saving updates, say the helper is read-only
;any.Helper1ReadOnly: yes

// Or you might want to use Notepad on everything not handled above
;any.Wrapper: *
;any.Helper1Label: Edit
;any.Helper1Command: notepad
;any.Helper1Arguments: "{}"

// If you have an editor that doesn't update file timestamps on save, call it like this:
;any.ResourceType: 0xFEEDF00D
;any.Helper1Label: Edit
;any.Helper1Command: X:\Path\To\Editor.exe
;any.Helper1Arguments: "{}"
;any.Helper1IgnoreWriteTimestamp: whatever
